!!!書籍執筆用プラグインの使い方

!!章、見出しの作成

1ページで1章分の原稿を執筆することを想定しています。各ページにはchapterプラグインで章の情報を記述します。また、見出しは普通のWikiの見出しの記法で記述するのですが、title1、title2、title3プラグインで見出し番号を表示できるようにしました。title1、title2、title3プラグインは見出しへの相互参照にも使用しますが、相互参照の方法については後述します。

 {{chapter 1,章のタイトル}}
 !!!{{title1}}見出し1
 ...
 !!{{title2}}見出し2
 ...
 !{{title3}}見出し3
 ...

また、sectionプラグインを使用すると1ページをさらに複数のセクションに区切ることができます。

 {{chapter 1,章のタイトル}}
 {{section セクション1}}
 !!!{{title1}}見出し1
 ...
 !!{{title2}}見出し2
 ...
 {{section セクション1}}
 !{{title3}}見出し3
 ...

sectionプラグインはページ上には何も出力しませんが、tocプラグインで見出しをアウトライン表示する際に記述した位置にセクションの区切りが挿入されます。

!!ソースコード

FSWikiにはpreタグで囲んで出力するための記法やプラグインがあるのでそれを使ってもいいのですが、Web上で参照するときはシンタックスハイライトされていたほうが見やすいよね、ということで[google-code-prettify|http://code.google.com/p/google-code-prettify/]を使用して強調表示を行うためのプラグインを用意しています。

 {{list
 public class HelloWorld {
   public static void main(String[] args){
     System.out.println("Hello World!");
   }
 }
 }}

また、ソース内を{{raw <<< ... >>>}}で囲むと、囲んだ部分が強調されて表示されます。

!!図表番号

captionプラグインを使用すると図表番号を付与することができます。第一引数に種別（表、図、リストなど）、第二引数にキャプションに表示する文字列を指定します。

 {{caption 表,StringUtilsのメソッド一覧}}
 ,メソッド名,説明
 ,boolean isEmpty(String str),文字列がnullまたは空文字列かどうかを判定
 ,boolean isNotEmpty(String str),文字列がnullまたは空文字列でないかを判定
 ...

見出し同様、図表にも相互参照をはることができますが、相互参照の方法については後述します。

!!アウトラインの表示

FSWikiではoutlineプラグインでページの見出しのアウトラインを表示することができますが、新たにtocプラグインというプラグインを追加しています。tocプラグインを使用すると見出し番号付きのアウトラインを表示することができます。


 {{toc}}

また、tocプラグインはデフォルトでは現在表示しているページのアウトラインを表示しますが、引数にページ名を指定することで指定したページのアウトラインを表示することができます。このため以下のようなページを作成しておくことで書籍全体の目次を作成することができます。


 !!!目次
 !!第一章
 {{toc Chapter1}}
 !!第二章
 {{toc Chapter2}}
 ...

outlineプラグインはページの先頭に入れて使うことが多いですが、tocプラグインをサイドメニューに入れておくことでWordの見出しマップのような感じで使うことができるはずです。

!!相互参照

linkプラグインを使用するとtitle1〜title3プラグインで定義した見出し、およびcaptionプラグインで定義した図表番号へのリンクを出力することができます。

見出しへのリンクを作成する場合、title1〜title3プラグインの引数でリンク用のラベルを定義しておき、linkプラグインではそのラベルを参照するようにします。linkプラグインを記述した位置に見出しの文字列が見出し番号付きでリンクが出力されます。

 !!!{{title1 installation}}インストール
 ...
 詳細については{{link installation}}を参照のこと。

図表の場合はcaptionプラグインの第三引数に同じくリンク用のラベルを定義し、linkプラグインではそのラベルを参照します。linkプラグインを記述した位置に図表番号付きでリンクが出力されます。

 {{caption 表,StringUtilsのメソッド一覧,StringUtils_method_list}}
 ...
 {{link StringUtils_method_list}}

なお、linkプラグインは第二引数にページ名を指定することで、他のページの見出しやリストにジャンプするリンクを出力することも可能です。

 インストール方法については{{link installation,Chatper1}}を参照のこと。

!!TODOやレビューコメントの記述

memoプラグインを使用すると執筆中にTODOコメントを入れたり、レビュー時のコメントを記述することができます。ページ内の任意の箇所に以下のように記述しておくと、表示時にはコメント部分（以下の例の場合は「TODO：あとで書く」の部分）が強調して表示されます。

 {{memo TODO：あとで書く}}

また、以下のようにコメントした人の名前を第一引数に指定することもできます。

 {{memo takezoe,TODO：あとで書く}}

この場合、画面には「takezoe - あとで書く」のように表示されます。また、spanタグのclass属性に名前が追加されて出力されるので、管理画面のスタイル設定で以下のようなCSSを追加しておくことでユーザ毎に色を変えることができます。

 span.takezoe {
   background-color: #EEEEFF;
   border: 1px solid #0000FF;
 }

また、レビューなどでページの内容を追加・削除する場合はaddプラグイン、delプラグインで明示的に追加、削除部分を示すことができます。追加部分は赤字 + 下線、削除部分は青字 + 取り消し線で表示されます。

 ここは{{add 追加部分}}{{del 削除部分}}です。

memolistプラグインを使用すると現在のページ内のmemoプラグイン、addプラグイン、delプラグインが一覧表示され、リンクをクリックするとそのコメントにジャンプすることができます。

 !!!コメント一覧
 {{memolist}}

執筆中はmemolistプラグインをサイドメニューに入れておくと便利っぽいです。

!!ワードカウント

原稿の執筆時は文字数、ページ数を意識する必要がある場合があります。wordcountプラグインで現在表示しているページの文字数、pagecountプラグインでページ数（1ページ2000文字で計算）を表示することができます。

 *文字数：{{wordcount}}
 *ページ数：{{pagecount}}

これも執筆中はサイドメニューに入れておくとよいでしょう。

!!コラムの記述

本文の内容とは少し外れる内容だったり、特に注意が必要な点などをコラムとして記述したい場合があります。このような場合、columnプラグインを使用します。

 {{column コラムのタイトル
 ここにコラム等の内容をWiki形式で記述すします。
 ブロックプラグインなので複数行の記述が可能です。
 }}

